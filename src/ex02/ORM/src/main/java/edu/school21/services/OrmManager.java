package edu.school21.services;

import edu.school21.models.OrmColumn;
import edu.school21.models.OrmColumnId;
import edu.school21.models.OrmEntity;
import org.reflections.Reflections;

import javax.sql.DataSource;
import java.lang.reflect.Field;
import java.sql.*;

public class OrmManager {
    Connection connection;

    public OrmManager(DataSource dataSource) throws SQLException {
        this.connection = dataSource.getConnection();
        init();
    }

    private void init() throws SQLException {
        Reflections reflections = new Reflections("edu/school21/models");
        for (Class<?> clazz : reflections.getTypesAnnotatedWith(OrmEntity.class)) {
            OrmEntity ormEntity = clazz.getAnnotation(OrmEntity.class);
            dropTable(ormEntity.table());
            createTable(ormEntity.table(), clazz);
        }
    }

    private void dropTable(String table) throws SQLException {
        String dropQuery = "DROP TABLE IF EXISTS " + table + " CASCADE;";
        connection.createStatement().execute(dropQuery);
        System.out.println(dropQuery);
    }

    private void createTable(String table, Class<?> clazz) throws SQLException {
        StringBuilder createTableQueury = new StringBuilder("CREATE TABLE " + table + " (");
        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(OrmColumnId.class)) {
                createTableQueury.append(field.getName()).append(" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,\n");
            }
            if (!field.isAnnotationPresent(OrmColumn.class)) {
                continue;
            }
            OrmColumn column = field.getAnnotation(OrmColumn.class);
            createTableQueury.append(column.name()).append(" ");
            String type = field.getType().getSimpleName();
            switch (type) {
                case "String":
                    createTableQueury.append("VARCHAR(")
                            .append(column.length())
                            .append(")");
                    break;
                case "Integer":
                    createTableQueury.append("INTEGER");
                    break;
                case "Long":
                    createTableQueury.append("BIGINT");
                    break;
                case "Double":
                    createTableQueury.append("DOUBLE PRECISION");
                    break;
                case "Boolean":
                    createTableQueury.append("BOOLEAN");
                    break;
            }
            createTableQueury.append(",\n");
        }
        createTableQueury.delete(createTableQueury.length() - 2, createTableQueury.length());
        createTableQueury.append(')');
        connection.createStatement().execute(createTableQueury.toString());
        System.out.println(createTableQueury + ";");
    }

    public void save(Object entity) throws IllegalAccessException, SQLException {
        Class<?> clazz = entity.getClass();
        if (clazz.isAnnotationPresent(OrmEntity.class)) {
            OrmEntity ormEntity = clazz.getAnnotation(OrmEntity.class);
            StringBuilder saveQuery = new StringBuilder("INSERT INTO " + ormEntity.table() + "(");
            StringBuilder values = new StringBuilder("(");
            for (Field field : clazz.getDeclaredFields()) {
                if (!field.isAnnotationPresent(OrmColumn.class)) {
                    continue;
                }
                OrmColumn column = field.getAnnotation(OrmColumn.class);
                saveQuery.append(column.name()).append(", ");
                field.setAccessible(true);
                if (field.getType() == String.class) {
                    values.append("'").append(field.get(entity).toString()).append("', ");
                } else {
                    values.append(field.get(entity).toString()).append(", ");
                }
            }
            saveQuery.delete(saveQuery.length() - 2, saveQuery.length())
                    .append(") VALUES\n")
                    .append(values)
                    .delete(saveQuery.length() - 2, saveQuery.length())
                    .append(");");
            System.out.println(saveQuery);
            connection.createStatement().execute(saveQuery.toString());
        }
    }

    public void update(Object entity) throws IllegalAccessException, SQLException {
        Class<?> clazz = entity.getClass();
        if (clazz.isAnnotationPresent(OrmEntity.class)) {
            OrmEntity ormEntity = clazz.getAnnotation(OrmEntity.class);
            StringBuilder updateQuery = new StringBuilder("UPDATE " + ormEntity.table() + " \nSET ");
            long id = 0;
            String idColumn = null;
            for (Field field : clazz.getDeclaredFields()) {
                if (field.isAnnotationPresent(OrmColumnId.class)) {
                    field.setAccessible(true);
                    id = (long) field.get(entity);
                    idColumn = field.getName();
                    continue;
                }
                if (!field.isAnnotationPresent(OrmColumn.class)) {
                    continue;
                }
                OrmColumn column = field.getAnnotation(OrmColumn.class);
                updateQuery.append(column.name()).append(" = ");
                field.setAccessible(true);

                Object value = field.get(entity);
                if (value == null) {
                    updateQuery.append("NULL");
                } else if (field.getType() == String.class) {
                    updateQuery.append("'").append(value.toString()).append("'");
                } else {
                    updateQuery.append(value.toString());
                }
                updateQuery.append(", ");
            }
            updateQuery.delete(updateQuery.length() - 2, updateQuery.length())
                    .append(" WHERE ")
                    .append(idColumn)
                    .append(" = ")
                    .append(id)
                    .append(";");
            System.out.println(updateQuery);
            connection.createStatement().execute(updateQuery.toString());
        }
    }

    public <T> T findById(Long id, Class<T> aClass) throws SQLException, InstantiationException, IllegalAccessException {
        if (aClass.isAnnotationPresent(OrmEntity.class)) {
            OrmEntity ormEntity = aClass.getAnnotation(OrmEntity.class);
            StringBuilder findQuery = new StringBuilder("SELECT * FROM " + ormEntity.table() + " \nWHERE ");
            for (Field field : aClass.getDeclaredFields()) {
                if (field.isAnnotationPresent(OrmColumnId.class)) {
                    field.setAccessible(true);
                    findQuery.append(field.getName())
                            .append(" = ")
                            .append(id);
                }
            }
            System.out.println(findQuery);
            ResultSet result = connection.createStatement().executeQuery(String.valueOf(findQuery));
            if (result.next()) {
                T obj = aClass.newInstance();
                for (Field field : aClass.getDeclaredFields()) {
                    if (field.isAnnotationPresent(OrmColumnId.class)) {
                        field.setAccessible(true);
                        field.set(obj, result.getLong(field.getName()));
                        continue;
                    }
                    if (!field.isAnnotationPresent(OrmColumn.class)) {
                        continue;
                    }
                    field.setAccessible(true);
                    String columnName = field.getAnnotation(OrmColumn.class).name();
                    field.set(obj, result.getObject(columnName));
                }
                return obj;
            }
        }
        return null;
    }
}